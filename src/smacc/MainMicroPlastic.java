/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package smacc;

import boofcv.io.image.ConvertBufferedImage;
import boofcv.struct.image.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.imageio.ImageIO;
import javax.swing.Box;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import static smacc.ImageStitching.stitch;
import weka.core.*;

/**
 *
 * @author enricosantesarti
 */
public class MainMicroPlastic extends javax.swing.JFrame {

    private Image ImageBN = null;
    private Image ImageColor = null;
    private BufferedImage ImageStich = null;
    private final ClassifierManager classifierLineorNot;
    private final ClassifierManager classifierPELorNot;
    private final ClassifierManager classifierRest;
    final SegmenterManager segmenter = new SegmenterManager();
    private static MainMicroPlastic a;
    private double scale = 0.5;
    private int borderSize = 20;
    private double minArea = 150;

    /**
     * Creates new form NewJFrame
     */
    public MainMicroPlastic() {
        initComponents();

        classifierPELorNot = new ClassifierManager(new File("Classifiers/PelletOrRest.model"), new String[]{"REST", "PEL"});
        classifierLineorNot = new ClassifierManager(new File("Classifiers/LineOrRest.model"), new String[]{"REST", "LINE"});
        classifierRest = new ClassifierManager(new File("Classifiers/Rest.model"), new String[]{"FRA", "ORG", "TAR"});

        // disable read color and classify buttons
        readColorImageItem.setEnabled(false);
        classifyItem.setEnabled(false);

        // disable save results buttons
        saveImgResultIten.setEnabled(false);
        saveCSVItem.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scrollPane1 = new java.awt.ScrollPane();
        imagePanel1 = new smacc.ImagePanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newSampleItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        readTranspImageItem = new javax.swing.JMenuItem();
        readColorImageItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        saveCSVItem = new javax.swing.JMenuItem();
        saveImgResultIten = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitItem = new javax.swing.JMenuItem();
        processMenu = new javax.swing.JMenu();
        classifyItem = new javax.swing.JMenuItem();
        saveImageItem = new javax.swing.JMenuItem();
        saveResultItem = new javax.swing.JMenuItem();
        optionsSubmenu = new javax.swing.JMenu();
        setMinSizeItem = new javax.swing.JMenuItem();
        setBorderItem = new javax.swing.JMenuItem();
        setImageSizeItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        useItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SMACC v0.2");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setPreferredSize(new Dimension(850,600));

        //Color colorBack = new Color(255,77,77);
        //imagePanel1.setBackground(colorBack);
        //this.setTitle("SMACC v0.2");

        javax.swing.GroupLayout imagePanel1Layout = new javax.swing.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 852, Short.MAX_VALUE)
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 579, Short.MAX_VALUE)
        );

        scrollPane1.add(imagePanel1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 742, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        fileMenu.setText("File");

        newSampleItem.setText("New sample");
        newSampleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSampleItemActionPerformed(evt);
            }
        });
        fileMenu.add(newSampleItem);
        fileMenu.add(jSeparator1);

        readTranspImageItem.setText("Read transparency image");
        readTranspImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readTranspImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(readTranspImageItem);

        readColorImageItem.setText("Read color image");
        readColorImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readColorImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(readColorImageItem);
        fileMenu.add(jSeparator2);

        saveCSVItem.setText("Save CSV resut");
        saveCSVItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCSVItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveCSVItem);

        saveImgResultIten.setText("Save result image");
        saveImgResultIten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImgResultItenActionPerformed(evt);
            }
        });
        fileMenu.add(saveImgResultIten);
        fileMenu.add(jSeparator3);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        processMenu.setText("Process");

        classifyItem.setText("Classify");
        classifyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyItemActionPerformed(evt);
            }
        });
        processMenu.add(classifyItem);

        saveImageItem.setText("Save Image");
        saveImageItem.setVisible(false);
        saveImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageItemActionPerformed(evt);
            }
        });
        processMenu.add(saveImageItem);
        saveImageItem.getAccessibleContext().setAccessibleDescription("");

        saveResultItem.setText("Save Result");
        saveResultItem.setVisible(false);
        saveResultItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultItemActionPerformed(evt);
            }
        });
        processMenu.add(saveResultItem);

        optionsSubmenu.setText("Options");

        setMinSizeItem.setText("Set minimum size");
        setMinSizeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMinSizeItemActionPerformed(evt);
            }
        });
        optionsSubmenu.add(setMinSizeItem);
        setMinSizeItem.getAccessibleContext().setAccessibleDescription("");

        setBorderItem.setText("Set border size");
        setBorderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBorderItemActionPerformed(evt);
            }
        });
        optionsSubmenu.add(setBorderItem);

        setImageSizeItem.setText("Image Size");
        setImageSizeItem.setVisible(true);
        setImageSizeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setImageSizeItemActionPerformed(evt);
            }
        });
        optionsSubmenu.add(setImageSizeItem);

        processMenu.add(optionsSubmenu);

        menuBar.add(processMenu);

        helpMenu.setText("Help");

        useItem.setText("How to use");
        useItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useItemActionPerformed(evt);
            }
        });
        helpMenu.add(useItem);

        aboutItem.setText("About");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageItemActionPerformed
        try {
            ImageIO.write(imagePanel1.getImg(), "PNG", new File("ImageResult.png"));
            JOptionPane optionPane = new JOptionPane("Image has been saved!", JOptionPane.OK_OPTION);
            JDialog dialog = optionPane.createDialog("Perfect!");
            dialog.setAlwaysOnTop(true); // to show top of all other application
            dialog.setVisible(true); // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(MainMicroPlastic.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveImageItemActionPerformed

    private void saveResultItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultItemActionPerformed
        saveCSVresults("CSVresult.csv");
    }//GEN-LAST:event_saveResultItemActionPerformed

    private void saveCSVresults(String csVresultcsv) {
        // Use relative path for Unix systems
        File f = new File(csVresultcsv);
        ResultManager n = new ResultManager();
        n.saveFeaturesToCSV(segmenter.getPlasticsArray(), f);
        JOptionPane optionPane = new JOptionPane("CSV file has been saved!", JOptionPane.OK_OPTION);
        JDialog dialog = optionPane.createDialog("Perfect!");
        dialog.setAlwaysOnTop(true); // to show top of all other application
        dialog.setVisible(true);
    }

    private void setMinSizeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMinSizeItemActionPerformed
        String s = (String) JOptionPane.showInputDialog(rootPane, "Set the minimum area of particles:", "Particles Size",
                JOptionPane.PLAIN_MESSAGE, null, null, this.minArea);

        try {
            this.minArea = Double.parseDouble(s);
            segmenter.setMinSize(this.minArea);
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Minimum size format incorrect");
        }
    }//GEN-LAST:event_setMinSizeItemActionPerformed

    private void setImageSizeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setImageSizeItemActionPerformed
        changeImageScale();
    }//GEN-LAST:event_setImageSizeItemActionPerformed

    private void setBorderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBorderItemActionPerformed
        String s = (String) JOptionPane.showInputDialog(rootPane, "Set the thickness of the border :", "Border Size",
                JOptionPane.PLAIN_MESSAGE, null, null, this.borderSize);
        try {
            this.borderSize = Integer.parseInt(s);
            segmenter.setBORDER_SIZE(this.borderSize);
        } catch (NumberFormatException nfe) {
            //JOptionPane.showMessageDialog(rootPane, "Border size format incorrect");
        }
    }//GEN-LAST:event_setBorderItemActionPerformed

    private void newSampleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSampleItemActionPerformed
        a.setVisible(false);

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                a = new MainMicroPlastic();
                a.setVisible(true);
            }
        });


    }//GEN-LAST:event_newSampleItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        confirmCloseWindow();
    }//GEN-LAST:event_exitItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        confirmCloseWindow();
    }//GEN-LAST:event_formWindowClosing

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        JOptionPane.showMessageDialog(null, "<html>"
                + "<center>"
                + "<p>SMACC is a software for microplastic classification</p>"
                + "<br>"
                + "<p>Cite as:</p>"
                + "<br>"
                + "<p><b>J. Lorenzo-Navarro et al., \"SMACC: A System for Microplastics Automatic Counting and Classification,\" <br>in IEEE Access, vol. 8, pp. 25249-25261, 2020.</b></p>"
                + "<br>"
                + "&copy; Universidad de Las Palmas de Gran Canaria 2020"
                + "</center>"
                + "</html>",
                "About", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_aboutItemActionPerformed

    private void useItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useItemActionPerformed
        JOptionPane.showMessageDialog(null, "<html>"
                + "<ol>"
                + "<li><p>Open transparency image <pre>File -> Open transparency image</pre></p></li>"
                + "<li><p>Open color image <pre>File -> Open color image</pre></p></li>"
                + "<li><p>Change options if necessary <pre>Process -> Options</pre></p></li>"
                + "<li><p>Classify particles <pre>Process -> Classify</pre></p></li>"
                + "<li><p>Save results in CSV format <pre>File -> Save CSV results</pre></p></li>"
                + "<li><p>Save annontated result image if necessary <pre>File -> Save result images</pre></p></li>"
                + "</html>", "How to use", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_useItemActionPerformed

    private void saveImgResultItenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImgResultItenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveImgResultItenActionPerformed

    private void classifyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyItemActionPerformed
        classifyImageParticles();
        
        classifyItem.setEnabled(false);
        optionsSubmenu.setEnabled(false);
        
        saveImgResultIten.setEnabled(true);
        saveCSVItem.setEnabled(true);
    }//GEN-LAST:event_classifyItemActionPerformed

    private void readTranspImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readTranspImageItemActionPerformed
        readTransparencyImage();
        readTranspImageItem.setEnabled(false);
        readColorImageItem.setEnabled(true);
    }//GEN-LAST:event_readTranspImageItemActionPerformed

    private void readColorImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readColorImageItemActionPerformed
        readColorImage();
        readColorImageItem.setEnabled(false);
        classifyItem.setEnabled(true);
    }//GEN-LAST:event_readColorImageItemActionPerformed

    private void saveCSVItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCSVItemActionPerformed
        saveCSVresults("CSVresult.csv");
    }//GEN-LAST:event_saveCSVItemActionPerformed

//    public void save() throws IOException {
//        ImageIO.write(imagePanel1.getImg(), "PNG", new File("/Users/enricosantesarti/Desktop/tesi/prova.png"));
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMicroPlastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMicroPlastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMicroPlastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMicroPlastic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                a = new MainMicroPlastic();
                a.setVisible(true);
            }
        });
    }

    private Instances createDatasetLineOrNot() {
        ArrayList<Attribute> attributes = new ArrayList<>();

        attributes.add(new Attribute("area"));
        attributes.add(new Attribute("perimeter"));
        attributes.add(new Attribute("compactness"));
        attributes.add(new Attribute("radiusRatio"));
        attributes.add(new Attribute("widthHeightRatio"));
        attributes.add(new Attribute("BBtoAreaRatio"));
        attributes.add(new Attribute("ellipseAxisRatio"));
        attributes.add(new Attribute("class", new ArrayList<>(Arrays.asList(classifierLineorNot.getClassName()))));

        Instances dataset = new Instances("Platic Particles", attributes, 0);
        dataset.setClassIndex(dataset.numAttributes() - 1);

        for (PlasticPiece b : segmenter.getPlasticsArray()) {
            GeometricFeature gf = b.getGeometricFeatures();
            ColorFeature cf = b.getColorFeatures();
            Double[] x = b.getLbp();
            double[] v = new double[8];
            v[0] = gf.area;
            v[1] = gf.perimeter;
            v[2] = gf.compactness;
            v[3] = gf.radiusRatio;
            v[4] = gf.widthHeightRatio;
            v[5] = gf.BBtoAreaRatio;
            v[6] = gf.ellipseAxisRatio;
            v[7] = 0.;
            Instance sample = new DenseInstance(1.0, v);
            dataset.add(sample);
        }
        return dataset;
    }

    private Instances createDatasetPEL() {
        ArrayList<Attribute> attributes = new ArrayList<>();

        attributes.add(new Attribute("area"));
        attributes.add(new Attribute("perimeter"));
        attributes.add(new Attribute("compactness"));
        attributes.add(new Attribute("radiusRatio"));
        attributes.add(new Attribute("widthHeightRatio"));
        attributes.add(new Attribute("BBtoAreaRatio"));
        attributes.add(new Attribute("ellipseAxisRatio"));
        attributes.add(new Attribute("class", new ArrayList<>(Arrays.asList(classifierPELorNot.getClassName()))));

        Instances dataset = new Instances("Platic Particles", attributes, 0);
        dataset.setClassIndex(dataset.numAttributes() - 1);

        for (PlasticPiece b : segmenter.getPlasticsArray()) {
            if (b.getParticleType() == "REST") {
                GeometricFeature gf = b.getGeometricFeatures();
                ColorFeature cf = b.getColorFeatures();
                Double[] x = b.getLbp();
                double[] v = new double[8];
                v[0] = gf.area;
                v[1] = gf.perimeter;
                v[2] = gf.compactness;
                v[3] = gf.radiusRatio;
                v[4] = gf.widthHeightRatio;
                v[5] = gf.BBtoAreaRatio;
                v[6] = gf.ellipseAxisRatio;
                v[7] = 0.;
                Instance sample = new DenseInstance(1.0, v);
                dataset.add(sample);
            }
        }
        return dataset;
    }

    private Instances createDatasetRest() {
        ArrayList<Attribute> attributes = new ArrayList<>();
        attributes.add(new Attribute("area"));
        attributes.add(new Attribute("perimeter"));
        attributes.add(new Attribute("compactness"));
        attributes.add(new Attribute("radiusRatio"));
        attributes.add(new Attribute("widthHeightRatio"));
        attributes.add(new Attribute("BBtoAreaRatio"));
        attributes.add(new Attribute("ellipseAxisRatio"));
        attributes.add(new Attribute("avgR"));
        attributes.add(new Attribute("avgG"));
        attributes.add(new Attribute("avgB"));
        attributes.add(new Attribute("varR"));
        attributes.add(new Attribute("varG"));
        attributes.add(new Attribute("varB"));
        attributes.add(new Attribute("avgH"));
        attributes.add(new Attribute("avgS"));
        attributes.add(new Attribute("avgV"));
        attributes.add(new Attribute("varH"));
        attributes.add(new Attribute("varS"));
        attributes.add(new Attribute("varV"));
        for (int i = 1; i <= 256; i++) {
            attributes.add(new Attribute("lbp" + i));
        }
        attributes.add(new Attribute("class", new ArrayList<>(Arrays.asList(classifierRest.getClassName()))));
        Instances dataset = new Instances("Platic Particles", attributes, 0);
        dataset.setClassIndex(dataset.numAttributes() - 1);
        for (PlasticPiece b : segmenter.getPlasticsArray()) {
            if (b.getParticleType() == "REST") {
                GeometricFeature gf = b.getGeometricFeatures();
                ColorFeature cf = b.getColorFeatures();
                Double[] x = b.getLbp();
                double[] v = new double[276];
                v[0] = gf.area;
                v[1] = gf.perimeter;
                v[2] = gf.compactness;
                v[3] = gf.radiusRatio;
                v[4] = gf.widthHeightRatio;
                v[5] = gf.BBtoAreaRatio;
                v[6] = gf.ellipseAxisRatio;
                v[7] = cf.avgRGB[1];
                v[8] = cf.avgRGB[2];
                v[9] = cf.avgRGB[3];
                v[10] = cf.varRGB[1];
                v[11] = cf.varRGB[2];
                v[12] = cf.varRGB[3];
                v[13] = cf.avgHSV[0];
                v[14] = cf.avgHSV[1];
                v[15] = cf.avgHSV[2];
                v[16] = cf.varHSV[0];
                v[17] = cf.varHSV[1];
                v[18] = cf.varHSV[2];

                for (int i = 19; i < 275; i++) {
                    v[i] = x[i - 19];
                }
                v[275] = 0.;
                Instance sample = new DenseInstance(1.0, v);
                dataset.add(sample);
            }
        }
        return dataset;
    }

    private Instances createDatasetTemporal() {
        ArrayList<Attribute> attributes = new ArrayList<>();
        attributes.add(new Attribute("area"));
        attributes.add(new Attribute("perimeter"));
        attributes.add(new Attribute("compactness"));
        attributes.add(new Attribute("radiusRatio"));
        attributes.add(new Attribute("widthHeightRatio"));
        attributes.add(new Attribute("BBtoAreaRatio"));
        attributes.add(new Attribute("ellipseAxisRatio"));
        attributes.add(new Attribute("avgR"));
        attributes.add(new Attribute("avgG"));
        attributes.add(new Attribute("avgB"));
        attributes.add(new Attribute("varR"));
        attributes.add(new Attribute("varG"));
        attributes.add(new Attribute("varB"));
        attributes.add(new Attribute("avgH"));
        attributes.add(new Attribute("avgS"));
        attributes.add(new Attribute("avgV"));
        attributes.add(new Attribute("varH"));
        attributes.add(new Attribute("varS"));
        attributes.add(new Attribute("varV"));

        attributes.add(new Attribute("class", new ArrayList<>(Arrays.asList(classifierRest.getClassName()))));
        Instances dataset = new Instances("Platic Particles", attributes, 0);
        dataset.setClassIndex(dataset.numAttributes() - 1);
        for (PlasticPiece b : segmenter.getPlasticsArray()) {
            GeometricFeature gf = b.getGeometricFeatures();
            ColorFeature cf = b.getColorFeatures();

            double[] v = new double[20];
            v[0] = gf.area;
            v[1] = gf.perimeter;
            v[2] = gf.compactness;
            v[3] = gf.radiusRatio;
            v[4] = gf.widthHeightRatio;
            v[5] = gf.BBtoAreaRatio;
            v[6] = gf.ellipseAxisRatio;
            v[7] = cf.avgRGB[1];
            v[8] = cf.avgRGB[2];
            v[9] = cf.avgRGB[3];
            v[10] = cf.varRGB[1];
            v[11] = cf.varRGB[2];
            v[12] = cf.varRGB[3];
            v[13] = cf.avgHSV[0];
            v[14] = cf.avgHSV[1];
            v[15] = cf.avgHSV[2];
            v[16] = cf.varHSV[0];
            v[17] = cf.varHSV[1];
            v[18] = cf.varHSV[2];
            v[19] = 0.;

            Instance sample = new DenseInstance(1.0, v);
            dataset.add(sample);
        }
        return dataset;
    }

    private String[] classifyLineOrNot() {
        classifierLineorNot.setDataset(createDatasetLineOrNot());
        String[] fragmentType = classifierLineorNot.classify();
        int i = 0;
        String[] finalType = new String[segmenter.getPlasticsArray().size()];
        for (PlasticPiece b : segmenter.getPlasticsArray()) {
            b.setParticleType(fragmentType[i]);

            i++;
        }

        return fragmentType;
    }

    private String[] classifyPEl() {
        int count = 0;
        classifierPELorNot.setDataset(createDatasetPEL());
        String[] fragmentType = classifierPELorNot.classify();
        String[] finalType = new String[segmenter.getPlasticsArray().size()];
        for (int i = 0; i < segmenter.getPlasticsArray().size(); i++) {
            if (segmenter.getPlasticsArray().get(i).getParticleType() != "LINE") {
                segmenter.getPlasticsArray().get(i).setParticleType(fragmentType[count]);

                count++;
            }
        }
        return fragmentType;
    }

    private String[] classifyRest() {
        int count = 0;
        classifierRest.setDataset(createDatasetRest());
        String[] fragmentType = classifierRest.classify();
        for (int i = 0; i < segmenter.getPlasticsArray().size(); i++) {
            if (segmenter.getPlasticsArray().get(i).getParticleType() != "PEL" && segmenter.getPlasticsArray().get(i).getParticleType() != "LINE") {
                segmenter.getPlasticsArray().get(i).setParticleType(fragmentType[count]);

                count++;
            }
        }

        return fragmentType;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenuItem classifyItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private smacc.ImagePanel imagePanel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newSampleItem;
    private javax.swing.JMenu optionsSubmenu;
    private javax.swing.JMenu processMenu;
    private javax.swing.JMenuItem readColorImageItem;
    private javax.swing.JMenuItem readTranspImageItem;
    private javax.swing.JMenuItem saveCSVItem;
    private javax.swing.JMenuItem saveImageItem;
    private javax.swing.JMenuItem saveImgResultIten;
    private javax.swing.JMenuItem saveResultItem;
    private java.awt.ScrollPane scrollPane1;
    private javax.swing.JMenuItem setBorderItem;
    private javax.swing.JMenuItem setImageSizeItem;
    private javax.swing.JMenuItem setMinSizeItem;
    private javax.swing.JMenuItem useItem;
    // End of variables declaration//GEN-END:variables

    private void confirmCloseWindow() {
        int res = JOptionPane.showConfirmDialog(null, "Do want to close the application?", "Close", JOptionPane.YES_NO_CANCEL_OPTION);
        switch (res) {
            case JOptionPane.YES_OPTION:
                System.exit(0);
        }
    }

    private void readTransparencyImage() {
        JFileChooser fc = new JFileChooser(new File("."));

        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        fc.addChoosableFileFilter(filter);
        filter = new FileNameExtensionFilter("PNG file", "png");
        fc.addChoosableFileFilter(filter);

        int res = fc.showOpenDialog(null);

        if (res == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            try {
                this.ImageBN = new Image(selectedFile);
                segmenter.segmentImage(ConvertBufferedImage.convertFrom(this.ImageBN.getIamgeColored(), true, ImageType.pl(3, GrayU8.class)));
                JOptionPane.showMessageDialog(null, "OK\nImage loaded correctly");
            } catch (IOException ex) {
            }
        }
    }

    private void readColorImage() {
        imagePanel1.setVisible(true);
        JFileChooser fc = new JFileChooser(new File("."));
        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        fc.addChoosableFileFilter(filter);
        filter = new FileNameExtensionFilter("PNG file", "png");
        fc.addChoosableFileFilter(filter);
        int res = fc.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fc.getSelectedFile();
            try {
                this.ImageColor = new Image(selectedFile);
                JOptionPane.showMessageDialog(null, "OK\nImage loaded correctly");
            } catch (IOException ex) {
            }
        }
    }

    private void classifyImageParticles() {
        JOptionPane.showMessageDialog(null, "Wait a moment the result will be shown automatically");
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        BufferedImage imageA, imageB;
        imageA = ImageBN.getIamgeColored();
        imageB = ImageColor.getIamgeColored();

        ImageStich = stitch(imageA, imageB, GrayU8.class);
        imagePanel1.setImg(ImageStich);
        segmenter.removeInutilPieces(ConvertBufferedImage.convertFrom(this.ImageStich, true, ImageType.pl(3, GrayU8.class)), segmenter.getPlasticsArray());
        segmenter.removeOneInAnother(segmenter.getPlasticsArray());

        imagePanel1.writeParticlesId(segmenter.getPlasticsArray(), true);

        ColorFeature prova = new ColorFeature();
        segmenter.setPlasticsArray(prova.ComputeColorFeatures(this.ImageStich, segmenter.getPlasticsArray()));

        for (int a = 0; a < segmenter.getPlasticsArray().size(); a++) {
            int x = segmenter.getPlasticsArray().get(a).getGeometricFeatures().boundingBox.x;
            int y = segmenter.getPlasticsArray().get(a).getGeometricFeatures().boundingBox.y;
            int w = segmenter.getPlasticsArray().get(a).getGeometricFeatures().boundingBox.width;
            int h = segmenter.getPlasticsArray().get(a).getGeometricFeatures().boundingBox.height;
            BufferedImage subImgage = imagePanel1.getImg().getSubimage(x, y, w, h);
            LocalBinaryPatternsTest lbp = new LocalBinaryPatternsTest();
            lbp.setUp();
            try {
                segmenter.getPlasticsArray().get(a).setLbp(lbp.smallRadiuslargeNeighbours2(subImgage));
            } catch (Exception ex) {
                Logger.getLogger(MainMicroPlastic.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // classification proces
        classifyLineOrNot();
        classifyPEl();
        classifyRest();

        this.setCursor(Cursor.getDefaultCursor());

        JOptionPane.showMessageDialog(null, "Classification process finishes");

        imagePanel1.writeLineOrNot(segmenter.getPlasticsArray(), true);
        imagePanel1.setImg(imagePanel1.ridemension(imagePanel1.getImg(), scale));

        repaint();
    }

    private void changeImageScale() {
        String s = (String) JOptionPane.showInputDialog(rootPane, "Set the image scale (from 0 to 1):", "Image Scale",
                JOptionPane.PLAIN_MESSAGE, null, null, this.scale);

        try {
            double scaler = Double.parseDouble(s);
            if (scaler >= 0 && scaler <= 1) {
                this.scale = scaler;
            } else {
                JOptionPane.showMessageDialog(rootPane, "Scale to big");
            }

        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Scale size format incorrect");
        }
    }

}
